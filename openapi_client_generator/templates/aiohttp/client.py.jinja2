"""Generated API client using the aiohttp library."""

import aiohttp
import json
from json import JSONDecodeError
from typing import Dict, List, Any, Optional, Union, TypeVar, get_origin, get_args
from pydantic import BaseModel

from .models import *


class APIClient:
    """API client for interacting with the API."""

    def __init__(self, base_url: str, auth_token: Optional[str] = None, timeout: int = 30):
        """Initialize the API client."""
        self.base_url = base_url.rstrip('/')
        self.auth_token = auth_token
        self.timeout = aiohttp.ClientTimeout(total=timeout)
        self.session = None

    async def _ensure_session(self):
        """Ensure that a session exists."""
        if self.session is None:
            self.session = aiohttp.ClientSession(timeout=self.timeout)
            if self.auth_token:
                self.session.headers.update({'Authorization': f'Bearer {self.auth_token}'})

    async def close(self):
        """Close the session."""
        if self.session is not None:
            await self.session.close()
            self.session = None

    async def __aenter__(self):
        """Enter async context manager."""
        await self._ensure_session()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Exit async context manager."""
        await self.close()

    async def _make_request(self, method: str, url: str, params: Optional[Dict[str, Any]] = None, 
                           data: Optional[Dict[str, Any]] = None, json: Optional[Dict[str, Any]] = None) -> Any:
        """
        Make a request to the API.

        Args:
            method: HTTP method (GET, POST, PUT, DELETE, etc.)
            url: URL to make the request to
            params: Query parameters
            data: Form data
            json: JSON data

        Returns:
            The response from the API

        Raises:
            aiohttp.ClientError: If the request fails
        """
        await self._ensure_session()

        async with self.session.request(
            method=method,
            url=url,
            params=params,
            data=data,
            json=json
        ) as response:
            # Raise an exception if the request failed
            response.raise_for_status()

            # Try to parse the response as JSON
            try:
                return await response.json()
            except JSONDecodeError:
                # If the response is not JSON, return the raw response text
                return await response.text()

    {% for operation in operations %}
    async def {{ operation.method_name }}(self, {% for param in operation.parameters %}{{ param.name }}: {{ param.type_hint }}{% if not loop.last %}, {% endif %}{% endfor %}{% if operation.parameters and operation.request_body %}, {% endif %}{% if operation.request_body %}request_body: {{ operation.request_body.type_hint }}{% endif %}) -> {{ operation.return_type }}:
        """{{ operation.summary }}

        {{ operation.description }}
        {% for param in operation.parameters %}
        Args:
            {{ param.name }}: {{ param.description }}
        {% endfor %}
        {% if operation.request_body %}
        Args:
            request_body: {{ operation.request_body.description }}
        {% endif %}

        Returns:
            {{ operation.return_type_description }}
        """
        await self._ensure_session()
        url = f"{self.base_url}{{ operation.path_template }}"

        # Extract query parameters from the operation parameters
        # Assume that all parameters that are not in the path are query parameters
        params = {}
        {% for param in operation.parameters %}
        # Check if the parameter is in the path by looking for it in the path template
        {% if "{" + param.name + "}" not in operation.path_template %}
        if {{ param.name }} is not None:
            params["{{ param.name }}"] = {{ param.name }}
        {% endif %}
        {% endfor %}

        # Make the request
        {% if operation.method == "get" %}
        response = await self._make_request("GET", url, params=params)
        {% if "List[" in operation.return_type %}
        # Apply model_validate to each item in the list
        return [{{ operation.return_type[5:-1] }}.model_validate(item) for item in response]
        {% else %}
        # For non-list types, apply model_validate directly
        return {{ operation.return_type }}.model_validate(response)
        {% endif %}
        {% elif operation.method == "post" %}
        {% if operation.request_body %}
        # Check if request_body is a Pydantic model and convert it to JSON if it is
        json_data = request_body.model_dump(mode="json") if isinstance(request_body, BaseModel) else request_body
        response = await self._make_request("POST", url, params=params, json=json_data)
        {% if "List[" in operation.return_type %}
        # Apply model_validate to each item in the list
        return [{{ operation.return_type[5:-1] }}.model_validate(item) for item in response]
        {% else %}
        # For non-list types, apply model_validate directly
        return {{ operation.return_type }}.model_validate(response)
        {% endif %}
        {% else %}
        response = await self._make_request("POST", url, params=params, json=None)
        {% if "List[" in operation.return_type %}
        # Apply model_validate to each item in the list
        return [{{ operation.return_type[5:-1] }}.model_validate(item) for item in response]
        {% else %}
        # For non-list types, apply model_validate directly
        return {{ operation.return_type }}.model_validate(response)
        {% endif %}
        {% endif %}
        {% elif operation.method == "put" %}
        {% if operation.request_body %}
        # Check if request_body is a Pydantic model and convert it to JSON if it is
        json_data = request_body.model_dump(mode="json") if isinstance(request_body, BaseModel) else request_body
        response = await self._make_request("PUT", url, params=params, json=json_data)
        {% if "List[" in operation.return_type %}
        # Apply model_validate to each item in the list
        return [{{ operation.return_type[5:-1] }}.model_validate(item) for item in response]
        {% else %}
        # For non-list types, apply model_validate directly
        return {{ operation.return_type }}.model_validate(response)
        {% endif %}
        {% else %}
        response = await self._make_request("PUT", url, params=params, json=None)
        {% if "List[" in operation.return_type %}
        # Apply model_validate to each item in the list
        return [{{ operation.return_type[5:-1] }}.model_validate(item) for item in response]
        {% else %}
        # For non-list types, apply model_validate directly
        return {{ operation.return_type }}.model_validate(response)
        {% endif %}
        {% endif %}
        {% elif operation.method == "delete" %}
        {% if operation.request_body %}
        # Check if request_body is a Pydantic model and convert it to JSON if it is
        json_data = request_body.model_dump(mode="json") if isinstance(request_body, BaseModel) else request_body
        response = await self._make_request("DELETE", url, params=params, json=json_data)
        {% if "List[" in operation.return_type %}
        # Apply model_validate to each item in the list
        return [{{ operation.return_type[5:-1] }}.model_validate(item) for item in response]
        {% else %}
        # For non-list types, apply model_validate directly
        return {{ operation.return_type }}.model_validate(response)
        {% endif %}
        {% else %}
        response = await self._make_request("DELETE", url, params=params, json=None)
        {% if "List[" in operation.return_type %}
        # Apply model_validate to each item in the list
        return [{{ operation.return_type[5:-1] }}.model_validate(item) for item in response]
        {% else %}
        # For non-list types, apply model_validate directly
        return {{ operation.return_type }}.model_validate(response)
        {% endif %}
        {% endif %}
        {% elif operation.method == "patch" %}
        {% if operation.request_body %}
        # Check if request_body is a Pydantic model and convert it to JSON if it is
        json_data = request_body.model_dump(mode="json") if isinstance(request_body, BaseModel) else request_body
        response = await self._make_request("PATCH", url, params=params, json=json_data)
        {% if "List[" in operation.return_type %}
        # Apply model_validate to each item in the list
        return [{{ operation.return_type[5:-1] }}.model_validate(item) for item in response]
        {% else %}
        # For non-list types, apply model_validate directly
        return {{ operation.return_type }}.model_validate(response)
        {% endif %}
        {% else %}
        response = await self._make_request("PATCH", url, params=params, json=None)
        {% if "List[" in operation.return_type %}
        # Apply model_validate to each item in the list
        return [{{ operation.return_type[5:-1] }}.model_validate(item) for item in response]
        {% else %}
        # For non-list types, apply model_validate directly
        return {{ operation.return_type }}.model_validate(response)
        {% endif %}
        {% endif %}
        {% else %}
        {% if operation.request_body %}
        # Check if request_body is a Pydantic model and convert it to JSON if it is
        json_data = request_body.model_dump(mode="json") if isinstance(request_body, BaseModel) else request_body
        response = await self._make_request("{{ operation.method|upper }}", url, params=params, json=json_data)
        {% if "List[" in operation.return_type %}
        # Apply model_validate to each item in the list
        return [{{ operation.return_type[5:-1] }}.model_validate(item) for item in response]
        {% else %}
        # For non-list types, apply model_validate directly
        return {{ operation.return_type }}.model_validate(response)
        {% endif %}
        {% else %}
        response = await self._make_request("{{ operation.method|upper }}", url, params=params, json=None)
        {% if "List[" in operation.return_type %}
        # Apply model_validate to each item in the list
        return [{{ operation.return_type[5:-1] }}.model_validate(item) for item in response]
        {% else %}
        # For non-list types, apply model_validate directly
        return {{ operation.return_type }}.model_validate(response)
        {% endif %}
        {% endif %}
        {% endif %}
    {% endfor %}
